namespace ca.mcgill.ecse223.quoridor.controller;

use QuoridorGame.ump;

class PawnBehavior {

    0..1 -> 0..1 Game currentGame;
    0..1 -> 0..1 Player player;

   /**
    * @author Luke Barber
    */

    pawnSM {
	    NoAdjacentOpponent {
	        moveOrJump[isAdjacentOpponent()] -> AdjacentOpponent;
	        NoAdjacentWall {
	          movePawn[isAdjacentWall()] -> AdjacentWall;
              Controller.dropWall[isAdjacentWall()] -> AdjacentWall;
  	        movePawn[!isAdjacentWall()] -> NoAdjacentWall;
	        }
	        AdjacentWall {
          	movePawn[isAdjacentWall()] -> AdjacentWall;
	          movePawn[!isAdjacentWall()] -> NoAdjacentWall;
	        }
	     }
	     AdjacentOpponent {
             moveOrJump[!isAdjacentOpponent()] -> NoAdjacentOpponent;
       	  jumpPawn[isWallBehindOpponent()] -> WallBehindAdjacentOpponent;
             jumpPawn[!isWallBehindOpponent()] -> NoWallBehindAdjacentOpponent;
           NoWallBehindAdjacentOpponent{
	          jumpPawn[isWallBehindOpponent()] -> WallBehindAdjacentOpponent;
              jumpPawn[!isWallBehindOpponent()] -> NoWallBehindAdjacentOpponent;
	       }
           WallBehindAdjacentOpponent{
              jumpPawn[isWallBehindOpponent()] -> WallBehindAdjacentOpponent;
              jumpPawn[!isWallBehindOpponent()] -> NoWallBehindAdjacentOpponent
	       }
	     }
    }

    // Returns the current row number of the pawn
    int getCurrentPawnRow() { return 0; }
    // Returns the current column number of the pawn
    int getCurrentPawnColumn() { return 0; }
    // Returns if it is legal to step in the given direction
    boolean isLegalStep(MoveDirection dir) { return false; }
    // Returns if it is legal to jump in the given direction
    boolean isLegalJump(MoveDirection dir) { return false; }

    // Action to be called when an illegal move is attempted
    void illegalMove() {}

    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    enum MoveDirection { East, South, West, North}

    boolean isAdjacentOpponent(){return false;}

    boolean isAdjacentWall(){return false;}

    boolean isWallBehindOpponent(){return false;}

    boolean movePawn(MoveDirection dir) {return false;}

    boolean jumpPawn(MoveDirection dir) {return false;}

}